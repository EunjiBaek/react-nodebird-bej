{"ast":null,"code":"import { all, fork, put, takeLatest, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_ERROR, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_ERROR, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_ERROR } from '../reducers/user';\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    console.log('saga login'); // const result = yield call(logInAPI, action.data)\n\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_ERROR,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI)\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_ERROR,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signup);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), //call이랑은 다르다\n  fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/ka/Desktop/react-nodebird/prepare/front/sagas/user.js"],"names":["all","fork","put","takeLatest","delay","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_ERROR","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_ERROR","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_ERROR","logInAPI","data","post","logIn","action","console","log","type","err","error","response","logOutAPI","logOut","watchLogIn","watchLogOut","watchSignUp","signup","userSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,IAAb,EAAmBC,GAAnB,EAAwBC,UAAxB,EAAoCC,KAApC,QAAgD,oBAAhD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACIC,cADJ,EACoBC,cADpB,EACoCC,YADpC,EAEIC,eAFJ,EAEqBC,eAFrB,EAEsCC,aAFtC,EAGIC,eAHJ,EAGqBC,eAHrB,EAGsCC,aAHtC,QAIO,kBAJP;;AAOA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOX,KAAK,CAACY,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACH;;AAGD,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACpB,MAAI;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EADA,CAEA;;AACA,UAAMjB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAEf,cADA;AAENS,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,KAAD,CAAT;AAIH,GARD,CAQC,OAAMO,GAAN,EAAU;AACP,UAAMrB,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAEd,YADA;AAENgB,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaT;AAFd,KAAD,CAAT;AAIH;AAEJ;;AAED,SAASU,SAAT,GAAqB;AACjB,SAAOrB,KAAK,CAACY,IAAN,CAAW,aAAX,CAAP;AACH;;AAGD,UAAUU,MAAV,GAAmB;AACf,MAAI;AACA;AACA,UAAMvB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAEZ;AADA,KAAD,CAAT;AAGH,GAND,CAMC,OAAMa,GAAN,EAAU;AACP,UAAMrB,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAEX,aADA;AAENK,MAAAA,IAAI,EAAEO,GAAG,CAACE,QAAJ,CAAaT;AAFb,KAAD,CAAT;AAIH;AAEJ;;AAID,UAAUY,UAAV,GAAuB;AACnB,QAAMzB,UAAU,CAACG,cAAD,EAAiBY,KAAjB,CAAhB;AACH;;AAED,UAAUW,WAAV,GAAwB;AACpB,QAAM1B,UAAU,CAACM,eAAD,EAAkBkB,MAAlB,CAAhB;AACH;;AAED,UAAUG,WAAV,GAAwB;AACpB,QAAM3B,UAAU,CAACS,eAAD,EAAkBmB,MAAlB,CAAhB;AACH;;AAGD,eAAe,UAAUC,QAAV,GAAqB;AAChC,QAAMhC,GAAG,CAAC,CACNC,IAAI,CAAC2B,UAAD,CADE,EACY;AAClB3B,EAAAA,IAAI,CAAC4B,WAAD,CAFE,EAGN5B,IAAI,CAAC6B,WAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import {all, fork, put, takeLatest, delay} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n    LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_ERROR,\r\n    LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_ERROR,\r\n    SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_ERROR\r\n} from '../reducers/user';\r\n\r\n\r\nfunction logInAPI(data) {\r\n    return axios.post('/api/login', data)\r\n}\r\n\r\n\r\nfunction* logIn(action) {\r\n    try {\r\n        console.log('saga login');\r\n        // const result = yield call(logInAPI, action.data)\r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n            data: action.data\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type: LOG_IN_ERROR,\r\n            error: err.response.data\r\n        })\r\n    }\r\n    \r\n}\r\n\r\nfunction logOutAPI() {\r\n    return axios.post('/api/logout')\r\n}\r\n\r\n\r\nfunction* logOut() {\r\n    try {\r\n        // const result = yield call(logOutAPI)\r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type: LOG_OUT_ERROR,\r\n            data: err.response.data\r\n        })\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\nfunction* watchLogIn() {\r\n    yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n    yield takeLatest(LOG_OUT_REQUEST, logOut);   \r\n}\r\n\r\nfunction* watchSignUp() {\r\n    yield takeLatest(SIGN_UP_REQUEST, signup);   \r\n}\r\n\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogIn), //call이랑은 다르다\r\n        fork(watchLogOut),\r\n        fork(watchSignUp),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}