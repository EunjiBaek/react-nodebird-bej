{"ast":null,"code":"import { applyMiddleware, createStore, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas'; // const loggerMiddleware = ({ dispatch, getState }) => (next) => (action) => {\n//   console.log(action);\n//   return next(action);\n// };\n// const configureStore = () => {\n//   const sagaMiddleware = createSagaMiddleware();\n//   const middlewares = [sagaMiddleware, loggerMiddleware];\n//   const enhancer = process.env.NODE_ENV === 'production'\n//     ? compose(applyMiddleware(...middlewares))\n//     : composeWithDevTools(applyMiddleware(...middlewares));\n//   const store = createStore(reducer, enhancer);\n//   store.sagaTask = sagaMiddleware.run(rootSaga);\n//   return store;\n// };\n// const wrapper = createWrapper(configureStore, {\n//   debug: process.env.NODE_ENV === 'development',\n// });\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware];\n  const enhancer = true ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: false\n});\nexport default wrapper;","map":null,"metadata":{},"sourceType":"module"}