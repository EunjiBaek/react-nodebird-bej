{"ast":null,"code":"import { all, fork, call, put, take } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction logInAPI(data) {\n  return axios.post('/api/login');\n}\n\nconst l = logIn({\n  type: 'LOG_IN_REQUEST',\n  data: {\n    id: 'qordmswl5631@naver.com'\n  }\n});\nl.next();\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    const result = yield call(logOutAPI);\n    yield put({\n      type: 'LOG_OUT_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_OUT_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI() {\n  return axios.post('/api/post');\n}\n\nfunction* addPost() {\n  try {\n    const result = yield call(addPostAPI);\n    yield put({\n      type: 'ADD_POST_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'ADD_POST_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield take('LOG_IN_REQUEST', logIn);\n}\n\nfunction* watchLogOut() {\n  yield take('LOG_OUT_REQUEST', logOut);\n}\n\nfunction* watchAddPost() {\n  yield take('ADD_POST_REQUEST', addPost);\n}\n\nexport default function* rootSaga() {\n  yield all([fork(watchLogIn), //call이랑은 다르다\n  fork(watchLogOut), fork(watchAddPost)]);\n}","map":{"version":3,"sources":["C:/Users/ka/Desktop/react-nodebird/prepare/front/sagas/index.js"],"names":["all","fork","call","put","take","axios","logInAPI","data","post","l","logIn","type","id","next","action","result","err","response","logOutAPI","logOut","addPostAPI","addPost","watchLogIn","watchLogOut","watchAddPost","rootSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,IAAb,EAAmBC,IAAnB,EAAyBC,GAAzB,EAA8BC,IAA9B,QAAyC,oBAAzC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,CAAP;AACH;;AAGD,MAAMC,CAAC,GAAGC,KAAK,CAAC;AAAEC,EAAAA,IAAI,EAAE,gBAAR;AAA0BJ,EAAAA,IAAI,EAAE;AAACK,IAAAA,EAAE,EAAE;AAAL;AAAhC,CAAD,CAAf;AACAH,CAAC,CAACI,IAAF;;AAGA,UAAUH,KAAV,CAAgBI,MAAhB,EAAwB;AACpB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMb,IAAI,CAACI,QAAD,EAAWQ,MAAM,CAACP,IAAlB,CAAzB;AACA,UAAMJ,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAE,gBADA;AAENJ,MAAAA,IAAI,EAAEQ,MAAM,CAACR;AAFP,KAAD,CAAT;AAIH,GAND,CAMC,OAAMS,GAAN,EAAU;AACP,UAAMb,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAE,gBADA;AAENJ,MAAAA,IAAI,EAAES,GAAG,CAACC,QAAJ,CAAaV;AAFb,KAAD,CAAT;AAIH;AAEJ;;AAKD,SAASW,SAAT,GAAqB;AACjB,SAAOb,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACH;;AAGD,UAAUW,MAAV,GAAmB;AACf,MAAI;AACA,UAAMJ,MAAM,GAAG,MAAMb,IAAI,CAACgB,SAAD,CAAzB;AACA,UAAMf,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAE,iBADA;AAENJ,MAAAA,IAAI,EAAEQ,MAAM,CAACR;AAFP,KAAD,CAAT;AAIH,GAND,CAMC,OAAMS,GAAN,EAAU;AACP,UAAMb,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAE,iBADA;AAENJ,MAAAA,IAAI,EAAES,GAAG,CAACC,QAAJ,CAAaV;AAFb,KAAD,CAAT;AAIH;AAEJ;;AAID,SAASa,UAAT,GAAsB;AAClB,SAAOf,KAAK,CAACG,IAAN,CAAW,WAAX,CAAP;AACH;;AAGD,UAAUa,OAAV,GAAoB;AAChB,MAAI;AACA,UAAMN,MAAM,GAAG,MAAMb,IAAI,CAACkB,UAAD,CAAzB;AACA,UAAMjB,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAE,kBADA;AAENJ,MAAAA,IAAI,EAAEQ,MAAM,CAACR;AAFP,KAAD,CAAT;AAIH,GAND,CAMC,OAAMS,GAAN,EAAU;AACP,UAAMb,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAE,kBADA;AAENJ,MAAAA,IAAI,EAAES,GAAG,CAACC,QAAJ,CAAaV;AAFb,KAAD,CAAT;AAIH;AAEJ;;AAGD,UAAUe,UAAV,GAAuB;AACnB,QAAMlB,IAAI,CAAC,gBAAD,EAAmBM,KAAnB,CAAV;AACH;;AAED,UAAUa,WAAV,GAAwB;AACpB,QAAMnB,IAAI,CAAC,iBAAD,EAAoBe,MAApB,CAAV;AACH;;AAGD,UAAUK,YAAV,GAAyB;AACrB,QAAMpB,IAAI,CAAC,kBAAD,EAAqBiB,OAArB,CAAV;AACH;;AAID,eAAe,UAAUI,QAAV,GAAqB;AAChC,QAAMzB,GAAG,CAAC,CACNC,IAAI,CAACqB,UAAD,CADE,EACY;AAClBrB,EAAAA,IAAI,CAACsB,WAAD,CAFE,EAGNtB,IAAI,CAACuB,YAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import {all, fork, call, put, take} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nfunction logInAPI(data) {\r\n    return axios.post('/api/login')\r\n}\r\n\r\n\r\nconst l = logIn({ type: 'LOG_IN_REQUEST', data: {id: 'qordmswl5631@naver.com'}})\r\nl.next();\r\n\r\n\r\nfunction* logIn(action) {\r\n    try {\r\n        const result = yield call(logInAPI, action.data)\r\n        yield put({\r\n            type: 'LOG_IN_SUCCESS',\r\n            data: result.data\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type: 'LOG_IN_FAILURE',\r\n            data: err.response.data\r\n        })\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\n\r\nfunction logOutAPI() {\r\n    return axios.post('/api/logout')\r\n}\r\n\r\n\r\nfunction* logOut() {\r\n    try {\r\n        const result = yield call(logOutAPI)\r\n        yield put({\r\n            type: 'LOG_OUT_SUCCESS',\r\n            data: result.data\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type: 'LOG_OUT_FAILURE',\r\n            data: err.response.data\r\n        })\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\nfunction addPostAPI() {\r\n    return axios.post('/api/post')\r\n}\r\n\r\n\r\nfunction* addPost() {\r\n    try {\r\n        const result = yield call(addPostAPI)\r\n        yield put({\r\n            type: 'ADD_POST_SUCCESS',\r\n            data: result.data\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type: 'ADD_POST_FAILURE',\r\n            data: err.response.data\r\n        })\r\n    }\r\n    \r\n}\r\n\r\n\r\nfunction* watchLogIn() {\r\n    yield take('LOG_IN_REQUEST', logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n    yield take('LOG_OUT_REQUEST', logOut);\r\n}\r\n\r\n\r\nfunction* watchAddPost() {\r\n    yield take('ADD_POST_REQUEST', addPost);\r\n}\r\n\r\n\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        fork(watchLogIn), //call이랑은 다르다\r\n        fork(watchLogOut),\r\n        fork(watchAddPost)\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}