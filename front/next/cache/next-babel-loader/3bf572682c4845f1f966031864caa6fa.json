{"ast":null,"code":"import axios from 'axios';\nimport { delay, put, takeLatest, all, fork, throttle, call } from 'redux-saga/effects';\nimport shortId from 'shortid';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, generateDummyPost, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostsAPI(data) {\n  return axios.get('/api/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); // POST / post/1/comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(2000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/ka/Desktop/react-nodebird/prepare/front/sagas/post.js"],"names":["axios","delay","put","takeLatest","all","fork","throttle","call","shortId","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","generateDummyPost","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","data","get","loadPosts","action","type","err","error","response","addPostAPI","post","content","addPost","result","id","console","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { delay, put, takeLatest, all, fork, throttle, call } from 'redux-saga/effects';\r\nimport shortId from 'shortid';\r\nimport {\r\n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\r\n  REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\r\n  generateDummyPost,\r\n  LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE,\r\n} from '../reducers/post';\r\n\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\n\r\nfunction loadPostsAPI(data) {\r\n  return axios.get('/api/posts', data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data)\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: generateDummyPost(10),\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post('/post', { content: data });\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data.id,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete('/post', data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data)\r\n    yield delay(1000);\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/post/${data.postId}/comment`, data); // POST / post/1/comment\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n\r\nfunction* watchLoadPosts() {\r\n  yield throttle(2000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchLoadPosts),\r\n    fork(watchRemovePost),\r\n    fork(watchAddComment),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}