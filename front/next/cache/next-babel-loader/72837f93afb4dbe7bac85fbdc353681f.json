{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, fork, call, put, takeEvery, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: 'LOG_OUT_SUCCESS',\n            data: result.data\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: 'LOG_OUT_FAILURE',\n            data: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction addPost(action) {\n  return _regeneratorRuntime.wrap(function addPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: 'ADD_POST_SUCCESS',\n            data: result.data\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: 'ADD_POST_FAILURE',\n            data: _context2.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!true) {\n            _context3.next = 5;\n            break;\n          }\n\n          _context3.next = 3;\n          return takeLatest('LOG_IN_REQUEST', logIn);\n\n        case 3:\n          _context3.next = 0;\n          break;\n\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (!true) {\n            _context4.next = 5;\n            break;\n          }\n\n          _context4.next = 3;\n          return takeLatest('LOG_OUT_REQUEST', logOut);\n\n        case 3:\n          _context4.next = 0;\n          break;\n\n        case 5:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          if (!true) {\n            _context5.next = 5;\n            break;\n          }\n\n          _context5.next = 3;\n          return takeLatest('ADD_POST_REQUEST', addPost);\n\n        case 3:\n          _context5.next = 0;\n          break;\n\n        case 5:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return all([fork(watchLogIn), //call이랑은 다르다\n          fork(watchLogOut), fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}","map":{"version":3,"sources":["C:/Users/ka/Desktop/react-nodebird/prepare/front/sagas/index.js"],"names":["logOut","addPost","watchLogIn","watchLogOut","watchAddPost","rootSaga","all","fork","call","put","takeEvery","takeLatest","axios","logOutAPI","post","delay","type","data","result","response","addPostAPI","action","logIn"],"mappings":";;oDAaUA,M;qDAwBAC,O;qDAkBAC,U;qDAMAC,W;qDAOAC,Y;qDAQeC,Q;;AA5EzB,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,IAAnB,EAAyBC,GAAzB,EAA8BC,SAA9B,EAAyCC,UAAzC,QAA0D,oBAA1D;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAOA,SAASC,SAAT,GAAqB;AACjB,SAAOD,KAAK,CAACE,IAAN,CAAW,aAAX,CAAP;AACH;;AAGD,SAAUd,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMe,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAIQ,iBAAMN,GAAG,CAAC;AACNO,YAAAA,IAAI,EAAE,iBADA;AAENC,YAAAA,IAAI,EAAEC,MAAM,CAACD;AAFP,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASQ,iBAAMR,GAAG,CAAC;AACNO,YAAAA,IAAI,EAAE,iBADA;AAENC,YAAAA,IAAI,EAAE,YAAIE,QAAJ,CAAaF;AAFb,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBA,SAASG,UAAT,CAAoBH,IAApB,EAA0B;AACtB,SAAOL,KAAK,CAACE,IAAN,CAAW,WAAX,EAAwBG,IAAxB,CAAP;AACH;;AAGD,SAAUhB,OAAV,CAAkBoB,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMN,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAIQ,iBAAMN,GAAG,CAAC;AACNO,YAAAA,IAAI,EAAE,kBADA;AAENC,YAAAA,IAAI,EAAEC,MAAM,CAACD;AAFP,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASQ,iBAAMR,GAAG,CAAC;AACNO,YAAAA,IAAI,EAAE,kBADA;AAENC,YAAAA,IAAI,EAAE,aAAIE,QAAJ,CAAaF;AAFb,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,SAAUf,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA,eACU,IADV;AAAA;AAAA;AAAA;;AAAA;AAEQ,iBAAMS,UAAU,CAAC,gBAAD,EAAmBW,KAAnB,CAAhB;;AAFR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,SAAUnB,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA,eACU,IADV;AAAA;AAAA;AAAA;;AAAA;AAEQ,iBAAMQ,UAAU,CAAC,iBAAD,EAAoBX,MAApB,CAAhB;;AAFR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,SAAUI,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA,eACU,IADV;AAAA;AAAA;AAAA;;AAAA;AAEQ,iBAAMO,UAAU,CAAC,kBAAD,EAAqBV,OAArB,CAAhB;;AAFR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,eAAe,SAAUI,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAACL,UAAD,CADE,EACY;AAClBK,UAAAA,IAAI,CAACJ,WAAD,CAFE,EAGNI,IAAI,CAACH,YAAD,CAHE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {all, fork, call, put, takeEvery, takeLatest} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction logOutAPI() {\r\n    return axios.post('/api/logout')\r\n}\r\n\r\n\r\nfunction* logOut() {\r\n    try {\r\n        // const result = yield call(logOutAPI)\r\n        yield delay(1000);\r\n        yield put({\r\n            type: 'LOG_OUT_SUCCESS',\r\n            data: result.data\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type: 'LOG_OUT_FAILURE',\r\n            data: err.response.data\r\n        })\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/post', data)\r\n}\r\n\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data)\r\n        yield delay(1000);\r\n        yield put({\r\n            type: 'ADD_POST_SUCCESS',\r\n            data: result.data\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type: 'ADD_POST_FAILURE',\r\n            data: err.response.data\r\n        })\r\n    }\r\n    \r\n}\r\n\r\n\r\nfunction* watchLogIn() {\r\n    while(true){\r\n        yield takeLatest('LOG_IN_REQUEST', logIn);\r\n    }\r\n}\r\n\r\nfunction* watchLogOut() {\r\n    while(true){\r\n        yield takeLatest('LOG_OUT_REQUEST', logOut);   \r\n    }\r\n}\r\n\r\n\r\nfunction* watchAddPost() {\r\n    while(true){\r\n        yield takeLatest('ADD_POST_REQUEST', addPost);   \r\n    }\r\n}\r\n\r\n\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        fork(watchLogIn), //call이랑은 다르다\r\n        fork(watchLogOut),\r\n        fork(watchAddPost)\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}