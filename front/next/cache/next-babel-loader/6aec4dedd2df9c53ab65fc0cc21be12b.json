{"ast":null,"code":"var __jsx = React.createElement;\n// post/[id].js -> id가 계속 바뀐다\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useRouter } from 'next/router';\nimport Head from 'next/head';\n// 단일게시물 가져오기\nimport AppLayout from '../../components/AppLayout';\nimport PostCard from '../../components/PostCard';\n\nvar Post = function Post() {\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      singlePost = _useSelector.singlePost;\n\n  var router = useRouter();\n  var id = router.query.id; // if (router.isFallback) {\n  //     return <div>로딩중...</div>;\n  // }\n\n  return __jsx(AppLayout, null, __jsx(Head, null, __jsx(\"title\", null, singlePost.User.nickname, \"\\uB2D8\\uC758 \\uAE00\"), __jsx(\"meta\", {\n    name: \"description\",\n    content: singlePost.content\n  }), __jsx(\"meta\", {\n    property: \"og:title\",\n    content: \"\".concat(singlePost.User.nickname, \"\\uB2D8\\uC758 \\uAC8C\\uC2DC\\uAE00\")\n  }), __jsx(\"meta\", {\n    property: \"og:description\",\n    content: singlePost.content\n  }), __jsx(\"meta\", {\n    property: \"og:image\",\n    content: singlePost.Images[0] ? singlePost.Images[0].src : 'https://nodebird.com/favicon.ico'\n  }), __jsx(\"meta\", {\n    property: \"og:url\",\n    content: \"https://nodebird.com/post/\".concat(id)\n  })), __jsx(PostCard, {\n    post: singlePost\n  }));\n}; // export async function getStaticPaths() {\n//     return {\n//         paths: [\n//             { params: { id: '36' } }\n//         ],\n//         fallback: true,\n//     };\n// }\n// getServerSideProps, getStaticProps\n\n\nexport var __N_SSP = true;\nexport default Post;","map":{"version":3,"sources":["C:/Users/ka/Desktop/react-nodebird/prepare/front/pages/post/[id].js"],"names":["React","useSelector","useRouter","Head","AppLayout","PostCard","Post","state","post","singlePost","router","id","query","User","nickname","content","Images","src"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,SAAT,QAA0B,aAA1B;AAGA,OAAOC,IAAP,MAAiB,WAAjB;AAGyD;AACzD,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,QAAP,MAAqB,2BAArB;;AAGA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACf,qBAAuBL,WAAW,CAAC,UAACM,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CAAlC;AAAA,MAAQC,UAAR,gBAAQA,UAAR;;AACA,MAAMC,MAAM,GAAGR,SAAS,EAAxB;AACA,MAAQS,EAAR,GAAeD,MAAM,CAACE,KAAtB,CAAQD,EAAR,CAHe,CAKf;AACA;AACA;;AAEA,SACI,MAAC,SAAD,QACI,MAAC,IAAD,QACI,qBACKF,UAAU,CAACI,IAAX,CAAgBC,QADrB,wBADJ,EAMI;AAAM,IAAA,IAAI,EAAC,aAAX;AAAyB,IAAA,OAAO,EAAEL,UAAU,CAACM;AAA7C,IANJ,EAOI;AAAM,IAAA,QAAQ,EAAC,UAAf;AAA0B,IAAA,OAAO,YAAKN,UAAU,CAACI,IAAX,CAAgBC,QAArB;AAAjC,IAPJ,EAQI;AAAM,IAAA,QAAQ,EAAC,gBAAf;AAAgC,IAAA,OAAO,EAAEL,UAAU,CAACM;AAApD,IARJ,EASI;AAAM,IAAA,QAAQ,EAAC,UAAf;AAA0B,IAAA,OAAO,EAAEN,UAAU,CAACO,MAAX,CAAkB,CAAlB,IAAuBP,UAAU,CAACO,MAAX,CAAkB,CAAlB,EAAqBC,GAA5C,GAAkD;AAArF,IATJ,EAUI;AAAM,IAAA,QAAQ,EAAC,QAAf;AAAwB,IAAA,OAAO,sCAA+BN,EAA/B;AAA/B,IAVJ,CADJ,EAaI,MAAC,QAAD;AAAU,IAAA,IAAI,EAAEF;AAAhB,IAbJ,CADJ;AAiBH,CA1BD,C,CA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;AAkBA,eAAeH,IAAf","sourcesContent":["// post/[id].js -> id가 계속 바뀐다\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useRouter } from 'next/router';\r\nimport { END } from 'redux-saga';\r\nimport axios from 'axios';\r\nimport Head from 'next/head';\r\n\r\nimport { LOAD_MY_INFO_REQUEST } from '../../reducers/user';\r\nimport { LOAD_POST_REQUEST } from '../../reducers/post'; // 단일게시물 가져오기\r\nimport AppLayout from '../../components/AppLayout';\r\nimport PostCard from '../../components/PostCard';\r\nimport wrapper from '../../store/configureStore';\r\n\r\nconst Post = () => {\r\n    const { singlePost } = useSelector((state) => state.post);\r\n    const router = useRouter();\r\n    const { id } = router.query;\r\n\r\n    // if (router.isFallback) {\r\n    //     return <div>로딩중...</div>;\r\n    // }\r\n\r\n    return (\r\n        <AppLayout>\r\n            <Head>\r\n                <title>\r\n                    {singlePost.User.nickname}\r\n                    님의 글\r\n                </title>\r\n                {/* og -> 공유할때 미리보기 */}\r\n                <meta name=\"description\" content={singlePost.content} />\r\n                <meta property=\"og:title\" content={`${singlePost.User.nickname}님의 게시글`} />\r\n                <meta property=\"og:description\" content={singlePost.content} />\r\n                <meta property=\"og:image\" content={singlePost.Images[0] ? singlePost.Images[0].src : 'https://nodebird.com/favicon.ico'} />\r\n                <meta property=\"og:url\" content={`https://nodebird.com/post/${id}`} />\r\n            </Head>\r\n            <PostCard post={singlePost} />\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\n\r\n// export async function getStaticPaths() {\r\n//     return {\r\n//         paths: [\r\n//             { params: { id: '36' } }\r\n//         ],\r\n//         fallback: true,\r\n//     };\r\n// }\r\n\r\n\r\n// getServerSideProps, getStaticProps\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n    const cookie = context.req ? context.req.headers.cookie : '';\r\n    axios.defaults.headers.Cookie = '';\r\n    if (context.req && cookie) {\r\n        axios.defaults.headers.Cookie = cookie;\r\n    }\r\n    context.store.dispatch({\r\n        type: LOAD_MY_INFO_REQUEST,\r\n    });\r\n    context.store.dispatch({\r\n        type: LOAD_POST_REQUEST,\r\n        data: context.params.id,\r\n    });\r\n    context.store.dispatch(END);\r\n    await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default Post;"]},"metadata":{},"sourceType":"module"}