{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas'; // const loggerMiddleware = ({ dispatch, getState }) => (next) => (action) => {\n//   console.log(action);\n//   return next(action);\n// };\n// const configureStore = () => {\n//   const sagaMiddleware = createSagaMiddleware();\n//   const middlewares = [sagaMiddleware, loggerMiddleware];\n//   const enhancer = process.env.NODE_ENV === 'production'\n//     ? compose(applyMiddleware(...middlewares))\n//     : composeWithDevTools(applyMiddleware(...middlewares));\n//   const store = createStore(reducer, enhancer);\n//   store.sagaTask = sagaMiddleware.run(rootSaga);\n//   return store;\n// };\n// const wrapper = createWrapper(configureStore, {\n//   debug: process.env.NODE_ENV === 'development',\n// });\n\nexport default wrapper;","map":{"version":3,"sources":["C:/Users/ka/Desktop/react-nodebird/prepare/front/store/configureStore.js"],"names":["createWrapper","applyMiddleware","compose","createStore","composeWithDevTools","createSagaMiddleware","reducer","rootSaga","wrapper"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;AAEA,eAAeC,OAAf","sourcesContent":["import { createWrapper } from 'next-redux-wrapper';\r\nimport { applyMiddleware, compose, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport reducer from '../reducers';\r\nimport rootSaga from '../sagas';\r\n\r\n// const loggerMiddleware = ({ dispatch, getState }) => (next) => (action) => {\r\n//   console.log(action);\r\n//   return next(action);\r\n// };\r\n\r\n// const configureStore = () => {\r\n//   const sagaMiddleware = createSagaMiddleware();\r\n//   const middlewares = [sagaMiddleware, loggerMiddleware];\r\n\r\n//   const enhancer = process.env.NODE_ENV === 'production'\r\n//     ? compose(applyMiddleware(...middlewares))\r\n//     : composeWithDevTools(applyMiddleware(...middlewares));\r\n//   const store = createStore(reducer, enhancer);\r\n//   store.sagaTask = sagaMiddleware.run(rootSaga);\r\n\r\n//   return store;\r\n// };\r\n\r\n// const wrapper = createWrapper(configureStore, {\r\n//   debug: process.env.NODE_ENV === 'development',\r\n// });\r\n\r\nexport default wrapper;\r\n"]},"metadata":{},"sourceType":"module"}