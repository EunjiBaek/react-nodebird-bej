{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\ka\\\\Desktop\\\\react-nodebird\\\\prepare\\\\front\\\\components\\\\PostForm.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback, useRef, useEffect } from 'react';\nimport { Form, Input, Button } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addpost } from '../reducers/post';\nimport { useInput } from '../hooks/useinput';\n\nvar PostForm = function PostForm() {\n  _s();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      imagePaths = _useSelector.imagePaths,\n      addPostDone = _useSelector.addPostDone;\n\n  var dispatch = useDispatch();\n  var imageInput = useRef();\n\n  var _useInput = useInput(''),\n      _useInput2 = _slicedToArray(_useInput, 3),\n      text = _useInput2[0],\n      onChangeText = _useInput2[1],\n      setText = _useInput2[2]; // 데이터에 요청했을때 문제가 생길수 있기때문에 setText는 submit에 있으면 안된다\n\n\n  useEffect(function () {\n    if (addPostDone) {\n      setText('');\n    }\n  }, [addPostDone]);\n  var onSubmit = useCallback(function () {\n    dispatch(addpost(text));\n    setText('');\n  }, []);\n  var onClickImageUpload = useCallback(function () {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  return __jsx(Form, {\n    style: {\n      margin: '10px 0 20px'\n    },\n    encType: \"multipart/form-data\",\n    onFinish: onSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, __jsx(Input.TextArea, {\n    value: text,\n    onChange: onChangeText,\n    maxLength: 140,\n    placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C\\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, __jsx(\"input\", {\n    type: \"file\",\n    multiple: true,\n    hidden: true,\n    ref: imageInput,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }\n  }), __jsx(Button, {\n    onClick: onClickImageUpload,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), __jsx(Button, {\n    type: \"primary\",\n    style: {\n      \"float\": 'right'\n    },\n    htmlType: \"submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }\n  }, \"\\uC9F9\\uC9F9\")), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, imagePaths.map(function (v) {\n    __jsx(\"div\", {\n      key: v,\n      style: {\n        display: 'inline-block'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }\n    }, __jsx(\"img\", {\n      src: v,\n      style: {\n        width: '200px'\n      },\n      alt: v,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 25\n      }\n    }), __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 25\n      }\n    }, __jsx(Button, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 29\n      }\n    }, \"\\uC81C\\uAC70\")));\n  })));\n};\n\n_s(PostForm, \"vYBg+inL5UKdDrfu/t4+29s1VWM=\", false, function () {\n  return [useSelector, useDispatch, useInput];\n});\n\n_c = PostForm;\nexport default PostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"sources":["C:/Users/ka/Desktop/react-nodebird/prepare/front/components/PostForm.js"],"names":["React","useCallback","useRef","useEffect","Form","Input","Button","useSelector","useDispatch","addpost","useInput","PostForm","state","post","imagePaths","addPostDone","dispatch","imageInput","text","onChangeText","setText","onSubmit","onClickImageUpload","current","click","margin","map","v","display","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useRef, useEffect } from 'react';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { addpost } from '../reducers/post';\r\nimport {useInput} from '../hooks/useinput'\r\n\r\nconst PostForm = () => {\r\n\r\n    const { imagePaths, addPostDone } = useSelector((state) => state.post);\r\n    const dispatch = useDispatch();\r\n    const imageInput = useRef();\r\n    const [text, onChangeText, setText] = useInput('');\r\n\r\n    \r\n    // 데이터에 요청했을때 문제가 생길수 있기때문에 setText는 submit에 있으면 안된다\r\n    useEffect(() => {\r\n        if(addPostDone){\r\n            setText('');\r\n        }   \r\n    }, [addPostDone])\r\n    \r\n\r\n    const onSubmit = useCallback(() => {\r\n        dispatch(addpost(text));\r\n        setText('');\r\n    }, []);\r\n\r\n    const onClickImageUpload = useCallback(() => {\r\n        imageInput.current.click();\r\n    }, [imageInput.current]);\r\n\r\n\r\n    return (\r\n        <Form style={{margin: '10px 0 20px'}} encType=\"multipart/form-data\" onFinish={onSubmit}>\r\n            <Input.TextArea\r\n                value={text}\r\n                onChange={onChangeText}\r\n                maxLength={140}\r\n                placeholder=\"어떤 신기한일이 있었나요?\"\r\n            />\r\n            <div>\r\n                <input type=\"file\" multiple hidden ref={imageInput}/>\r\n                <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n                <Button type=\"primary\" style={{float: 'right'}} htmlType=\"submit\">짹짹</Button>\r\n            </div>\r\n\r\n            <div>\r\n                {imagePaths.map((v) => {\r\n                    <div key={v} style={{display: 'inline-block'}}>\r\n                        <img src={v} style={{width: '200px'}} alt={v}></img>\r\n                        <div>\r\n                            <Button>제거</Button>\r\n                        </div>\r\n                    </div>\r\n                })}\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default PostForm"]},"metadata":{},"sourceType":"module"}