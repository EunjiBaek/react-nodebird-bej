{"ast":null,"code":"import axios from 'axios';\nimport { delay, put, takeLatest, all, fork, throttle, call } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`);\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n} // 주소안에 data가 있기 때문에 굳이 data를 안 넣어도 된다.\n\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostAPI(data) {\n  return axios.get(`/post/${data}`);\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadHashtagPostsAPI(data, lastId) {\n  return axios.get(`/hashtag/${data}?lastId=${lastId || 0}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadUserPostsAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n} // get방식은 데이터 못가져오기때문에 key=값으로~\n// lastId가 undefined일경우는 0\n\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); // POST / post/1/comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchLoadPost() {\n  yield throttle(2000, LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchLoadUserPosts() {\n  yield throttle(2000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield throttle(2000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(2000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchRetweet), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadUserPosts), fork(watchLoadHashtagPosts), fork(watchLoadPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/ka/Desktop/react-nodebird/prepare/front/sagas/post.js"],"names":["axios","delay","put","takeLatest","all","fork","throttle","call","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","retweetAPI","data","post","retweet","action","result","type","err","error","response","uploadImagesAPI","uploadImages","likePostAPI","patch","likePost","unlikePostAPI","delete","unlikePost","loadPostAPI","get","loadPost","loadHashtagPostsAPI","lastId","loadHashtagPosts","loadUserPostsAPI","loadUserPosts","loadPostsAPI","loadPosts","addPostAPI","addPost","id","console","removePostAPI","removePost","addCommentAPI","postId","addComment","watchRetweet","watchUploadImages","watchLikePost","watchUnlikePost","watchLoadPost","watchLoadUserPosts","watchLoadHashtagPosts","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { delay, put, takeLatest, all, fork, throttle, call } from 'redux-saga/effects';\r\n\r\nimport {\r\n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\r\n  REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\r\n  LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE,\r\n  LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE,\r\n  LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE,\r\n  LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE,\r\n  LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE,\r\n  UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE,\r\n  UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE,\r\n  RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE,\r\n} from '../reducers/post';\r\n\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction retweetAPI(data) {\r\n  return axios.post(`/post/${data}/retweet`);\r\n}\r\n\r\nfunction* retweet(action) {\r\n  try {\r\n    const result = yield call(retweetAPI, action.data);\r\n    yield put({\r\n      type: RETWEET_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: RETWEET_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction uploadImagesAPI(data) {\r\n  return axios.post('/post/images', data);\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n  try {\r\n    const result = yield call(uploadImagesAPI, action.data);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: UPLOAD_IMAGES_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n\r\nfunction likePostAPI(data) {\r\n  return axios.patch(`/post/${data}/like`);\r\n}\r\n\r\nfunction* likePost(action) {\r\n  try {\r\n    const result = yield call(likePostAPI, action.data);\r\n    yield put({\r\n      type: LIKE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LIKE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n\r\n// 주소안에 data가 있기 때문에 굳이 data를 안 넣어도 된다.\r\nfunction unlikePostAPI(data) {\r\n  return axios.delete(`/post/${data}/like`);\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n  try {\r\n    const result = yield call(unlikePostAPI, action.data);\r\n    yield put({\r\n      type: UNLIKE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: UNLIKE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n\r\nfunction loadPostAPI(data) {\r\n  return axios.get(`/post/${data}`);\r\n}\r\n\r\nfunction* loadPost(action) {\r\n  try {\r\n    const result = yield call(loadPostAPI, action.data);\r\n    yield put({\r\n      type: LOAD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction loadHashtagPostsAPI(data, lastId) {\r\n  return axios.get(`/hashtag/${data}?lastId=${lastId || 0}`);\r\n}\r\n\r\nfunction* loadHashtagPosts(action) {\r\n  try {\r\n    const result = yield call(loadHashtagPostsAPI, action.lastId);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction loadUserPostsAPI(lastId) {\r\n  return axios.get(`/posts?lastId=${lastId || 0}`);\r\n}\r\n\r\nfunction* loadUserPosts(action) {\r\n  try {\r\n    const result = yield call(loadUserPostsAPI, action.lastId);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// get방식은 데이터 못가져오기때문에 key=값으로~\r\n// lastId가 undefined일경우는 0\r\nfunction loadPostsAPI(lastId) {\r\n  return axios.get(`/posts?lastId=${lastId || 0}`);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    const result = yield call(loadPostsAPI, action.lastId);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post('/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data.id,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete(`/post/${data}`);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    const result = yield call(removePostAPI, action.data);\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/post/${data.postId}/comment`, data); // POST / post/1/comment\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n\r\nfunction* watchRetweet() {\r\n  yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nfunction* watchLikePost() {\r\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n  yield throttle(2000, LOAD_POST_REQUEST, loadPost);\r\n}\r\n\r\nfunction* watchLoadUserPosts() {\r\n  yield throttle(2000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n  yield throttle(2000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield throttle(2000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchRetweet),\r\n    fork(watchUploadImages),\r\n    fork(watchLikePost),\r\n    fork(watchUnlikePost),\r\n    fork(watchAddPost),\r\n    fork(watchLoadUserPosts),\r\n    fork(watchLoadHashtagPosts),\r\n    fork(watchLoadPost),\r\n    fork(watchLoadPosts),\r\n    fork(watchRemovePost),\r\n    fork(watchAddComment),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}