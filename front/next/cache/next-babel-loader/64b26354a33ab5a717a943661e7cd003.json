{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport AppLayout from '../components/AppLayout';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\n\nvar Home = function Home() {\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts,\n      hasMorePosts = _useSelector2.hasMorePosts,\n      loadPostsLoading = _useSelector2.loadPostsLoading,\n      retweetError = _useSelector2.retweetError;\n\n  useEffect(function () {\n    if (retweetError) {\n      alert(retweetError);\n    }\n  }, [retweetError]);\n  useEffect(function () {\n    function onScroll() {\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          var lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            lastId: lastId\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [hasMorePosts, loadPostsLoading, mainPosts]);\n  return __jsx(AppLayout, null, me && __jsx(PostForm, null), mainPosts.map(function (post) {\n    return __jsx(PostCard, {\n      key: post.id,\n      post: post\n    });\n  }));\n}; // 데이터를 먼저 채운다음에 화면이 렌더링 되도록~\n// success가 될때까지 기다려주는 장치가 필요하다\n\n\nexport var __N_SSP = true;\nexport default Home;","map":null,"metadata":{},"sourceType":"module"}